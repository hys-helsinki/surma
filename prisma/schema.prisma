// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now()) @db.Timestamptz(3)
  modifiedAt    DateTime   @default(now()) @db.Timestamptz(3)
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  firstName     String
  lastName      String
  phone         String?
  email         String     @unique
  player        Player?
  umpire        Umpire?
  team          Team?      @relation(fields: [teamId], references: [id])
  teamId        String?
  // for next-auth
  name          String?
  image         String?
  emailVerified DateTime?  @db.Timestamptz(3)
  accounts      Account[]
  sessions      Session[]
}

model Player {
  id                  String       @id @default(uuid())
  createdAt           DateTime     @default(now()) @db.Timestamptz(3)
  modifiedAt          DateTime     @default(now()) @db.Timestamptz(3)
  lastVisit           DateTime?    @db.Timestamptz(3)
  userId              String       @unique
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament          Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId        String
  umpire              Umpire?      @relation(fields: [umpireId], references: [id])
  umpireId            String?
  team                Team?        @relation(fields: [teamId], references: [id])
  teamId              String?
  alias               String
  address             String
  learningInstitution String?
  eyeColor            String?
  hair                String?
  height              String?
  safetyNotes         String?
  other               String?
  calendar            Json?
  title               PlayerTitle?
  state               PlayerState  @default(ACTIVE)
  confirmed           Boolean      @default(false)
  targets             Assignment[] @relation(name: "PlayerHasTarget")
  hunters             Assignment[] @relation(name: "PlayerIsHunted")
}

enum PlayerState {
  ACTIVE
  DEAD
  DETECTIVE
  EXTRA
}

enum PlayerTitle {
  KK
  MM
  LL
  TT
}

model Team {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  modifiedAt   DateTime   @default(now())
  name         String
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  players      Player[]
  users        User[]
}

model Umpire {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  modifiedAt     DateTime   @default(now())
  userId         String     @unique
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament     Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId   String
  players        Player[]
  responsibility String?
}

model Tournament {
  id                    String               @id @default(uuid())
  createdAt             DateTime             @default(now()) @db.Timestamptz(3)
  modifiedAt            DateTime             @default(now()) @db.Timestamptz(3)
  name                  String
  startTime             DateTime             @db.Timestamptz(3)
  endTime               DateTime             @db.Timestamptz(3)
  registrationStartTime DateTime             @db.Timestamptz(3)
  registrationEndTime   DateTime             @db.Timestamptz(3)
  teamGame              Boolean              @default(false)
  players               Player[]
  umpires               Umpire[]
  rings                 AssignmentRing[]
  users                 User[]
  teamAssignmentRings   TeamAssignmentRing[]
  teams                 Team[]
}

model Assignment {
  id                   String         @id @default(uuid())
  createdAt            DateTime       @default(now()) @db.Timestamptz(3)
  modifiedAt           DateTime       @default(now()) @db.Timestamptz(3)
  ring                 AssignmentRing @relation(fields: [ringId], references: [id], onDelete: Cascade)
  ringId               String
  hunter               Player         @relation(name: "PlayerHasTarget", fields: [hunterId], references: [id], onDelete: Cascade)
  hunterId             String
  target               Player         @relation(name: "PlayerIsHunted", fields: [targetId], references: [id], onDelete: Cascade)
  targetId             String
  teamAssignmentRingId String?
}

model AssignmentRing {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now()) @db.Timestamptz(3)
  modifiedAt   DateTime     @default(now()) @db.Timestamptz(3)
  name         String?
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId String
  assignments  Assignment[]
}

model TeamAssignment {
  id                   String              @id @default(uuid())
  createdAt            DateTime            @default(now()) @db.Timestamptz(3)
  modifiedAt           DateTime            @default(now()) @db.Timestamptz(3)
  teamAssignmentRing   TeamAssignmentRing? @relation(fields: [teamAssignmentRingId], references: [id])
  teamAssignmentRingId String?
}

model TeamAssignmentRing {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now()) @db.Timestamptz(3)
  modifiedAt   DateTime         @default(now()) @db.Timestamptz(3)
  name         String?
  tournament   Tournament       @relation(fields: [tournamentId], references: [id])
  tournamentId String
  assignments  TeamAssignment[]
}

// next-auth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
