// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  modifiedAt   DateTime   @default(now()) @db.Timestamptz(3)
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  firstName    String
  lastName     String
  phone        String?
  email        String     @unique
  player       Player?
  umpire       Umpire?

  // for next-auth
  name          String?
  image         String?
  emailVerified DateTime? @db.Timestamptz(3)
  accounts      Account[]
  sessions      Session[]
}

model Player {
  id                  String       @id @default(uuid())
  createdAt           DateTime     @default(now()) @db.Timestamptz(3)
  modifiedAt          DateTime     @default(now()) @db.Timestamptz(3)
  lastVisit           DateTime?    @db.Timestamptz(3)
  userId              String       @unique
  user                User         @relation(fields: [userId], references: [id])
  tournament          Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId        String
  umpire              Umpire?      @relation(fields: [umpireId], references: [id])
  umpireId            String?
  alias               String
  address             String
  learningInstitution String?
  eyeColor            String?
  hair                String?
  height              Int?
  glasses             String?
  other               String?
  calendar            Json?
  state               PlayerState  @default(ACTIVE)
  targets             Assignment[] @relation(name: "PlayerHasTarget")
  hunters             Assignment[] @relation(name: "PlayerIsHunted")
}

enum PlayerState {
  ACTIVE
  DEAD
  DETECTIVE
}

model Umpire {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  modifiedAt   DateTime   @default(now())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  players      Player[]
}

model Tournament {
  id                    String           @id @default(uuid())
  createdAt             DateTime         @default(now()) @db.Timestamptz(3)
  modifiedAt            DateTime         @default(now()) @db.Timestamptz(3)
  name                  String
  startTime             DateTime         @db.Timestamptz(3)
  endTime               DateTime         @db.Timestamptz(3)
  registrationStartTime DateTime         @db.Timestamptz(3)
  registrationEndTime   DateTime         @db.Timestamptz(3)
  players               Player[]
  umpires               Umpire[]
  rings                 AssignmentRing[]
  users                 User[]
}

model Assignment {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now()) @db.Timestamptz(3)
  modifiedAt DateTime       @default(now()) @db.Timestamptz(3)
  ring       AssignmentRing @relation(fields: [ringId], references: [id])
  ringId     String
  hunter     Player         @relation(name: "PlayerHasTarget", fields: [hunterId], references: [id])
  hunterId   String
  target     Player         @relation(name: "PlayerIsHunted", fields: [targetId], references: [id])
  targetId   String
}

model AssignmentRing {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now()) @db.Timestamptz(3)
  modifiedAt   DateTime     @default(now()) @db.Timestamptz(3)
  name         String?
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId String
  assignments  Assignment[]
}

// next-auth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
